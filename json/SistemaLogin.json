{
  "id": "13",
  "titulo": "Criando um Sistema de Login",
  "data": "20/03/2023",
  "imagem": "img/padrao.webp",
  "descricao": "Vamos criar um módulo de cadastro e login bem sismples que poderá ser utilizado em seus sistemas...",
  "conteudo": "Primeiro precisamos entender sobre a especificação de padrões de codificação para PHP, criada pelo PHP Framework Interop Group (PHP-FIG). PSR significa 'PHP Standard Recommendation' (Recomendação de Padrão PHP). A PSR-4 é focada no carregamento automático de classes, o que permite organizar e gerenciar o código de forma mais eficiente.<br>De acordo com a PSR-4, cada classe deve ser armazenada em um arquivo separado e o carregamento automático de classes deve ser baseado no namespace e na estrutura de diretórios do projeto. A especificação fornece uma maneira padronizada de organizar e carregar arquivos de classe, tornando o código mais fácil de entender e manter.<br>A PSR-4 é comumente usada em conjunto com o Composer, uma ferramenta de gerenciamento de dependências para PHP, que pode ser configurada para seguir a PSR-4 para carregamento automático de classes. Ao adotar a PSR-4, desenvolvedores podem assegurar que seus projetos PHP sejam compatíveis com outras bibliotecas e frameworks que também seguem essa especificação.<br>Criando o composer.json<br>Primeiro você precisa criar o arquivo composer.json, e nele adicionar o seguinte <br><pre><br>{<br>    'autoload': {<br>      'psr-4': {<br>        'App\\\\Model\\\\': 'app/src/Model',<br>        'App\\\\Controller\\\\': 'app/src/Controller'<br>      }<br>    }<br>  }<br>  <br></pre><br>A ou usando o terminal do seu IDE preferido ou pelo cmd na pasta do projeto executando o composer install, para que se crie a pasta vendor onde existe o arquivo autoload que irá carregar as classes conforme configurado acima.<br>Considerando que o caminhos físicos dos arquivos serão app/src/model e app/src/controller, mas serão chamados com use App\\Model\\ como o trecho abaixo:<br>um arquivo que irá usar o chamada<br></pre><br><?php<br>require_once __DIR__ . '/vendor/autoload.php';<br>use App\\Model\\User;<br>use App\\Model\\Database;<br></pre><br>e abaixo o trecho do inicio da classe user<br><pre><br><?php<br>namespace App\\Model;<br>class User {<br>  private $username;<br>  private $password;<br></pre><br><br>até aqui para entender sobre a PSR-4 e o carregamento das classes, agora as classes database que será responsável pelas operações de CRUD e depois a classe model User e a classe controller userController.<br>App.<br>Classe User.php criada em app/src/model<br><pre><br><?php<br>namespace App\\Model;<br>class User {<br>  private $username;<br>  private $password;<br>  private $email;<br>  private $balance;<br>  private $active;<br>  public function __construct($username, $password,$email, $balance,$active=0) {<br>    $this->username = $username;<br>    $this->password = $password;<br>    $this->email = $email;<br>    $this->balance = $balance;<br>    $this->active = $active;<br>  }<br>  public function getUsername() {<br>    return $this->username;<br>  }<br>  public function getPassword() {<br>    return $this->password;<br>  }<br>  public function getEmail() {<br>    return $this->email;<br>  }<br>  public function setBEmail($email) {<br>    $this->email = $email;<br>  }<br>  public function getBalance() {<br>    return $this->balance;<br>  }<br>  public function setBalance($balance) {<br>    $this->balance = $balance;<br>  }<br>  public function getAtivo() {<br>    return $this->active;<br>  }<br>  public function setAtivo($active) {<br>    $this->active = $active;<br>  }<br>}<br></pre><br>Classe UserController  em app/src/controller, que é responsável por cadastrar, realizar login, esqueci a senha e trocar a senha e ativar o usuário caso haja a necessidade de permitir o acesso somente após ativação.<br><pre><br><?php<br>namespace App\\Controller;<br>use App\\Model\\User;<br>use App\\Model\\Database;<br>class UserController {<br>  public function login() {<br>    if ($_SERVER['REQUEST_METHOD'] === 'POST') {<br>      $username = $_POST['username'];<br>      $password = $_POST['password'];<br>      $database = Database::getInstance();<br>      $user = $database->select('users', 'username = :username', ['username' => $username], false);<br>      if (!$user) {<br>        // Tratar erro de usuário não encontrado<br>        echo 'Usuário não encontrado.';<br>        return;<br>      }<br>      if (!password_verify($password, $user['password'])) {<br>        // Tratar erro de senha incorreta<br>        echo 'Senha incorreta.';<br>        return;<br>      }<br>      // Iniciar sessão do usuário e redirecionar para a página inicial<br>      session_start();<br>      $_SESSION['username'] = $user['username'];<br>      $_SESSION['email'] = $user['email'];<br>      $_SESSION['balance'] = $user['balance'];<br>      $_SESSION['ativo'] = $user['ativo'];<br>      header('Location: index.php');<br>    }<br>  }<br>  public function register() {<br>    // Recupera os dados do formulário de cadastro<br>    $username = $_POST['username'];<br>    $password = $_POST['password'];<br>    $email = $_POST['email'];<br>    // Verifica se já existe um usuário com o mesmo nome<br>    $database = Database::getInstance();<br>    $user = $database->select('users', 'username = :username', [<br>      'username' => $username<br>    ], false);<br>    if ($user) {<br>      // Se já existir um usuário com o mesmo nome, retorna uma mensagem de erro<br>      echo 'Já existe um usuário com este nome.';<br>      return;<br>    }<br>    // Criptografa a senha<br>    $hashedPassword = password_hash($password, PASSWORD_DEFAULT);<br>    // Cria um novo objeto de usuário<br>    $user = new User($username, $hashedPassword, $email,0);<br>    // Insere o usuário no banco de dados<br>    $data = [<br>      'username' => $user->getUsername(),<br>      'password' => $user->getPassword(),<br>      'email' => $user->getEmail(),<br>      'balance' => $user->getBalance()<br>    ];<br>    $database->insert('users', $data);<br>    // Redireciona o usuário para a página de login<br>    header('Location: login.php');<br>  }<br>  public function activateUser($username) {<br>    $database = Database::getInstance();<br>    $database->update('users', [<br>      'active' => 1<br>    ], 'username = :username', [<br>      'username' => $username<br>    ]);<br>  }<br>  public function forgotPassword() {<br>    if ($_SERVER['REQUEST_METHOD'] === 'POST') {<br>      $email = $_POST['email'];<br>  <br>      $database = Database::getInstance();<br>      $user = $database->select('users', 'email = :email', ['email' => $email], false);<br>  <br>      if (!$user) {<br>        // Tratar erro de usuário não encontrado<br>        echo 'Usuário não encontrado.';<br>        return;<br>      }<br>  <br>      // Gerar um código de recuperação de senha<br>      $recoveryCode = $this->generateRecoveryCode($email);<br>  <br>      // Enviar o código de recuperação de senha para o e-mail do usuário<br>      $this->sendRecoveryCodeEmail($email, $recoveryCode);<br>  <br>      // Armazenar o código de recuperação de senha na base de dados<br>      $data = [<br>        'recovery_code' => $recoveryCode<br>      ];<br>      $database->update('users', $data, 'id = :id', ['id' => $user['id']]);<br>  <br>      // Redirecionar o usuário para a página de inserção do código de recuperação de senha<br>      header('Location: recover-password.php');<br>    }<br>  }<br>  <br>  public function changePassword() {<br>    if ($_SERVER['REQUEST_METHOD'] === 'POST') {<br>      $recoveryCode = $_POST['recovery_code'];<br>      $newPassword = $_POST['new_password'];<br>  <br>      $database = Database::getInstance();<br>      $user = $database->select('users', 'recovery_code = :recovery_code', ['recovery_code' => $recoveryCode], false);<br>  <br>      if (!$user) {<br>        // Tratar erro de código de recuperação de senha inválido<br>        echo 'Código de recuperação de senha inválido.';<br>        return;<br>      }<br>  <br>      // Criptografa a nova senha<br>      $hashedPassword = password_hash($newPassword, PASSWORD_DEFAULT);<br>  <br>      // Atualiza a senha do usuário na base de dados<br>      $data = [<br>        'password' => $hashedPassword,<br>        'recovery_code' => null<br>      ];<br>      $database->update('users', $data, 'id = :id', ['id' => $user['id']]);<br>  <br>      // Redirecionar o usuário para a página de login<br>      header('Location: login.php');<br>    }<br>  }<br>  public function generateRecoveryCode($email) {<br>    $recoveryCode = bin2hex(random_bytes(16));<br>    // Armazenar o código de recuperação no banco de dados<br>    $database = Database::getInstance();<br>    $database->update('users', [<br>      'recovery_code' => $recoveryCode<br>    ], 'email = :email', [<br>      'email' => $email<br>    ]);<br>    return $recoveryCode;<br>  }<br>  public function sendRecoveryCodeEmail($username, $recoveryCode) {<br>    // Enviar email com o código de recuperação para o usuário<br>    $to = $username;<br>    $subject = 'Código de recuperação de senha';<br>    $message = 'Seu código de recuperação é: ' . $recoveryCode;<br>    $headers = 'From: no-reply@example.com';<br>    mail($to, $subject, $message, $headers);<br>  }<br>  public function updateUserBalance($username, $newBalance) {<br>    $database = Database::getInstance();<br>    $database->update('users', [<br>      'balance' => $newBalance<br>    ], 'username = :username', [<br>      'username' => $username<br>    ]);<br>  }<br>  public function getUserBalance($username)<br>  {<br>      $database = Database::getInstance();<br>      $user = $database->select('users', 'username = :username', ['username' => $username], false);<br>      if ($user) {<br>          return $user['balance'];<br>      }<br>      return 0;<br>  }<br>  public static function listarJogadoresPorPontos() {<br>    $database = Database::getInstance();<br>      $user = $database->select('users', false, [], true);<br>    return $user;<br>    }<br>  public function logout() {<br>    // Implementação da funcionalidade de 'sair'<br>    // Limpar as variáveis de sessão e redirecionar para a página de login<br>    session_unset();<br>    session_destroy();<br>    header('Location: login.php');<br>  }<br>}<br></pre><br>Agora a página de login, localizada na raiz do projeto.<br><pre><br><?php<br>require_once __DIR__ . '/vendor/autoload.php';<br>use App\\Controller\\UserController;<br>$controller = new UserController();<br>if ($_SERVER['REQUEST_METHOD'] === 'POST') {<br>$controller = new UserController();<br>$controller->login();<br>}<br>?><br>**Formulário de login<br></pre><br>a o arquivo register na raiz do projeto, quando o formulário é submetido e é chamado a função register da classe userController o qual possui a responsabilidade como vista acima de conectar no banco de cadastrar, caso não exista um usuário com o mesmo nome<br><pre><br><?php<br>require_once __DIR__ . '/vendor/autoload.php';<br>use App\\Controller\\UserController;<br>if ($_SERVER['REQUEST_METHOD'] === 'POST') {<br>$controller = new UserController();<br>$controller->register();<br>}<br>?><br>**Formulário de registro<br><br></pre><br>e por fim o arquivo Database que estara em app/src/model<br><pre><br><?php<br>namespace App\\Model;<br>use PDO;<br>use PDOException;<br>class Database {<br>  private static $instance = null;<br>  private $pdo;<br>  private function __construct() {<br>    $host = 'localhost';<br>    $dbname = 'forex';<br>    $username = 'root';<br>    $password = '';<br>    try {<br>      $this->pdo = new PDO('mysql:host=$host;dbname=$dbname', $username, $password);<br>      $this->pdo->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);<br>    } catch (PDOException $e) {<br>      die('Error: ' . $e->getMessage());<br>    }<br>  }<br>  public static function getInstance() {<br>    if (!self::$instance) {<br>      self::$instance = new Database();<br>    }<br>    return self::$instance;<br>  }<br>  public function getPDO() {<br>    return $this->pdo;<br>  }<br>  public function insert($table, $data) {<br>    try {<br>      $columns = implode(', ', array_keys($data));<br>      $values = ':' . implode(', :', array_keys($data));<br>      $sql = 'INSERT INTO $table ($columns) VALUES ($values)';<br>      $statement = $this->pdo->prepare($sql);<br>      $statement->execute($data);<br>      return $this->pdo->lastInsertId();<br>    } catch (PDOException $e) {<br>      die('Error: ' . $e->getMessage());<br>    }<br>  }<br>  public function update($table, $data, $where, $params) {<br>    $set = '';<br>    foreach ($data as $column => $value) {<br>        $set .= $column . ' = :' . $column . ', ';<br>    }<br>    $set = rtrim($set, ', ');<br>    $sql = 'UPDATE $table SET $set WHERE $where';<br>    $query = $this->pdo->prepare($sql);<br>    foreach ($data as $column => &$value) {<br>        $query->bindParam(':' . $column, $value);<br>    }<br>    foreach ($params as $param => &$value) {<br>        $query->bindParam(':' . $param, $value);<br>    }<br>    $query->execute();<br>}<br><br>  public function select($table, $where = '', $data = [], $fetchAll = true) {<br>    try {<br>      $sql = 'SELECT * FROM $table';<br>      if (!empty($where)) {<br>        $sql .= ' WHERE $where';<br>      }<br>      $statement = $this->pdo->prepare($sql);<br>      $statement->execute($data);<br>      if ($fetchAll) {<br>        return $statement->fetchAll(PDO::FETCH_ASSOC);<br>      } else {<br>        return $statement->fetch(PDO::FETCH_ASSOC);<br>      }<br>    } catch (PDOException $e) {<br>      die('Error: ' . $e->getMessage());<br>    }<br>  }<br>  public function delete($table, $where, $data) {<br>    try {<br>        $sql = 'DELETE FROM $table WHERE $where';<br>        $statement = $this->pdo->prepare($sql);<br>        $statement->execute($data);<br>        return $statement->rowCount();<br>            } catch (PDOException $e) {<br>            die('Error: ' . $e->getMessage());<br>            }<br>        }<br>    }<br><br></pre><br><br>e o script de criação da tabela:<br><pre><br>CREATE TABLE `users` (<br>  `id` int(11) NOT NULL,<br>  `username` varchar(255) NOT NULL,<br>  `password` varchar(255) NOT NULL,<br>  `email` varchar(300) NOT NULL,<br>  `balance` double NOT NULL DEFAULT 100,<br>  `recovery_code` varchar(300) NOT NULL,<br>  `ativo` tinyint(11) NOT NULL DEFAULT 0<br>) ENGINE=InnoDB DEFAULT CHARSET=utf8;<br></pre><br>se percebeu que ao realizar o login com sucesso, é atribuído na sessão o nome do usuário, e no login ele é verificado, se não existir o usuário é redirecionado ao login novamente.<br><pre><br><php<br>      session_start();<br>        if (isset($_SESSION['username'])) {<br>            echo '<br>Bem-Vindo, ' . $_SESSION['username'] .' <br>';<br>        } else {<br>          header('Location: login.php');<br>        }<br>      ?><br></pre><br>A estrutura do projeto no final deve esta assim:<br>app<br>|-src/model<br>|-----Database.php<br>|-----User.php<br>|-src/controller<br>|-----UserController.php<br>vendor<br>index.php<br>composer.json<br>login.php<br>register.php"
}